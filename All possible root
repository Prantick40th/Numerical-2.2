
#include<bits/stdc++.h>
using namespace std;
#define error 0.01

int arr[100];
int prr[100];
int n;

double f(double x)
{
    double res=arr[n];
    for(int i=n-1; i>=0; i--)
    {
        res=res*x+arr[i];
    }
    return res;
}

double fp(double x)
{
    double res=prr[n-1];
    for(int i=n-2; i>=0; i--)
    {
        res=res*x+prr[i];
    }
    return res;
}

void bisection(double a, double b)
{
    if (f(a)*f(b) >= 0)
    {
        printf("\nError interval ");
        return;
    }

    int itr = 1;

    double c = a;
    while ((b-a) >= error)
    {
        c = (a+b)/2;

        if (f(c) == 0.0)
            break;

        else if (f(c)*f(a) < 0)
            b = c;
        else
            a = c;

        printf("\n%d itr : Root %lf",itr++,c);
    }
    //printf("\nRoot %lf",c);
}

void falsePostion(double a,double b)
{
    if (f(a)*f(b) >= 0)
    {
        printf("\nError interval ");

        return;
    }

    int itr = 1 ;

    double c = a;

    for (int i=0; i<n ; i++)
    {
        c = (a*f(b) - b*f(a))/ (f(b) - f(a));

        if (f(c)==0)
            break;

        else if (f(c)*f(a) < 0)
            b = c;
        else
            a = c;

        printf("\n%d itr : Root %lf",itr++,c);
    }
    //printf("\nroot : %lf ",c);
}

void newtonRaphson(double a)
{


    double h = f(a) / fp(a);

    int itr = 1;

    while (abs(h) >= error)
    {
        h = f(a)/fp(a);
        a = a - h;

        printf("\n%d itr : Root %lf",itr++,a);
    }
    //printf("\nRoot %lf",a);
}

void secant(float x1, float x2)
{
    float n = 0,xm,x0;
    int itr = 1;

    if (f(x1) * f(x2) < 0)
    {
        do
        {

            x0 = (x1*f(x2) - x2*f(x1)) / (f(x2) - f(x1));


            float c = f(x1) * f(x0);

            x1 = x2;
            x2 = x0;

            n++;

            if (c == 0)
                break;

            xm = (x1 * f(x2) - x2 * f(x1)) / (f(x2) - f(x1));

            printf("\n%d itr : Root %lf",itr++,x0);

        }
        while (fabs(xm - x0) >= error);

        //printf("\nRoot %lf",x0);
    }
    else

        printf("Can not find a root in the given inteval");
}


int main()
{
    double a,b;

    cout<<"enter degree: ";
    cin>>n;

    for(int i=n; i>=0; i--)
    {
        cout<<"enter a"<<i<<endl;
        cin>>arr[i];
    }

    for(int i=n-1; i>=0; i--)
    {
        cout<<"enter prime"<<endl;
        cin>>prr[i];
    }

    cout<<"Enter interval"<<endl;
    cin>>a,b;

    printf("\n\n\t Bisection Method :\n");
    bisection(a,b);
    printf("\n\n\t False Position Method :\n");
    falsePostion(a,b);
    printf("\n\n\t Newton Raphsan Method :\n");
    newtonRaphson(a);
    printf("\n\n\t secant Method :\n");
    secant(a,b);

    printf("\n\n");

    return 0;

}


