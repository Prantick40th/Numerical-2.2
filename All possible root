//All possible root Bisection

#include<bits/stdc++.h>
using namespace std;

double hor[100];
double error=0.01;
int n;
double func(double x)
{
    double res=hor[n];
    for(int i=n-1;i>=0;i--)
        res=res*x+hor[i];
    return res;
}

int main()
{
    int i,j,k;
    cin>>n;
    for(i=n;i>=0;i--)
        cin>>hor[i];
    double a,b,dx=0.1;
    cin>>a>>b;
    while(1)
    {
        double x1,x2,f1,f2;
        x1=a;
        x2=x1+dx;
        f1=func(x1);
        f2=func(x2);
        if(f1*f2<0)
        {
            while(1)
            {
                f1=func(x1);
                f2=func(x2);
                double x0=(x1+x2)/2;
                double f0=func(x0);
                if(f1*f0<0)
                    x2=x0;
                else
                    x1=x0;
                double e=fabs((x2-x1)/x2);
                if(e<=error)
                {
                    cout<<x0<<endl;
                    break;
                }
            }
        }
        if(x2<b)
            a=x2;
        else
            break;
    }
}

//All possible root Newton

#include <bits/stdc++.h>

using namespace std;
double f(double x)
{
    return x*x-4*x-10;
}
double df(double x)
{
    return 2*x-4;
}
int nr(double x,double en)
{
    int cnt=0;
    double prev=-9999.0;
    while(x<=en)
    {
        double y=x;
        double h = f(y) / df(y);
        while (abs(h) >= 0.01)
        {
            h=f(y)/df(y);
            y=y-h;
        }
        if(fabs(prev-y)<=0.001){
            x++;
            continue;
        }
        x++;
        prev=y;
        if(y>0 || y<=0)
            cout << "The value of the root is : " << y<<endl;
    }

}
int main()
{
    double st,en;
    cin>>st>>en;
    nr(st,en);
}
